#include <stdio.h>        // 표준 입출력 함수 선언 (printf, fputs 등)
#include <stdlib.h>       // 일반적인 유틸리티 함수 선언 (exit 등)
#include <unistd.h>       // UNIX 표준 함수 선언 (close 등)
#include <string.h>       // 문자열 처리 함수 선언 (memset, strcpy 등)
#include <arpa/inet.h>    // 인터넷 주소 변환 함수 선언 (inet_addr 등)
#include <sys/socket.h>   // 소켓 함수 선언 (socket, connect 등)
#include <pthread.h>      // 스레드 함수 선언 (pthread_create, pthread_join 등)
#include <time.h>         // 시간 관련 함수 선언 (localtime 등)

#define BUF_SIZE 100      // 버퍼 크기 정의
#define NORMAL_SIZE 20    // 일반 문자열 크기 정의

void* send_msg(void* arg);      // 메시지 전송 함수 선언
void* recv_msg(void* arg);      // 메시지 수신 함수 선언
void error_handling(char* msg); // 에러 처리 함수 선언

void menu();                    // 메뉴 출력 함수 선언
void menuOptions();             // 메뉴 옵션 함수 선언

char name[NORMAL_SIZE]="[DEFALT]";  // 클라이언트 이름 초기화
char msg_form[NORMAL_SIZE];         // 메시지 형식 초기화
char serv_time[NORMAL_SIZE];        // 서버 시간 초기화
char msg[BUF_SIZE];                 // 메시지 버퍼 초기화
char serv_port[NORMAL_SIZE];        // 서버 포트 번호 초기화
char clnt_ip[NORMAL_SIZE];          // 클라이언트 IP 주소 초기화

int main(int argc, char *argv[]) {
    int sock;                           // 소켓 변수 선언
    struct sockaddr_in serv_addr;       // 서버 주소 구조체 선언
    pthread_t snd_thread, rcv_thread;   // 송신 스레드와 수신 스레드 선언
    void* thread_return;                // 스레드 반환 값 저장 변수

    if (argc != 4) {                    // 명령줄 인수가 올바른지 확인
        printf(" Usage : %s <ip> <port> <name>\n", argv[0]);
        exit(1);
    }

    /** local time **/
    struct tm *t;                       // 시간 구조체 포인터 선언
    time_t timer = time(NULL);          // 현재 시간 저장
    t = localtime(&timer);              // 현지 시간으로 변환
    sprintf(serv_time, "%d-%d-%d %d:%d", t->tm_year + 1900, t->tm_mon + 1, t->tm_mday, t->tm_hour,
            t->tm_min);                 // 서버 시간 문자열 형식으로 저장

    sprintf(name, "[%s]", argv[3]);     // 클라이언트 이름 설정
    sprintf(clnt_ip, "%s", argv[1]);    // 클라이언트 IP 설정
    sprintf(serv_port, "%s", argv[2]);  // 서버 포트 설정
    sock = socket(PF_INET, SOCK_STREAM, 0); // 소켓 생성

    memset(&serv_addr, 0, sizeof(serv_addr)); // 서버 주소 구조체 초기화
    serv_addr.sin_family = AF_INET;           // 주소 가족 설정
    serv_addr.sin_addr.s_addr = inet_addr(argv[1]); // 서버 IP 설정
    serv_addr.sin_port = htons(atoi(argv[2])); // 서버 포트 설정

    if (connect(sock, (struct sockaddr*)&serv_addr, sizeof(serv_addr)) == -1)
        error_handling(" connect() error"); // 연결 에러 처리

    /** call menu **/
    menu();                           // 메뉴 호출

    pthread_create(&snd_thread, NULL, send_msg, (void*)&sock); // 송신 스레드 생성
    pthread_create(&rcv_thread, NULL, recv_msg, (void*)&sock); // 수신 스레드 생성
    pthread_join(snd_thread, &thread_return);                  // 송신 스레드 종료 대기
    pthread_join(rcv_thread, &thread_return);                  // 수신 스레드 종료 대기
    close(sock);                                               // 소켓 닫기
    return 0;
}

void* send_msg(void* arg) {
    int sock = *((int*)arg);          // 소켓 변수 설정
    char name_msg[NORMAL_SIZE + BUF_SIZE]; // 이름과 메시지를 합친 문자열 버퍼
    char myInfo[BUF_SIZE];            // 클라이언트 정보 버퍼
    char* who = NULL;                 // 사용되지 않는 변수 (삭제 가능)
    char temp[BUF_SIZE];              // 임시 버퍼 (삭제 가능)

    /** send join message **/
    printf(" >> join the chat !! \n"); 
    sprintf(myInfo, "%s's join. IP_%s\n", name, clnt_ip); // 가입 메시지 작성
    write(sock, myInfo, strlen(myInfo)); // 가입 메시지 전송

    while (1) {
        fgets(msg, BUF_SIZE, stdin);      // 사용자 입력 받기

        if (!strcmp(msg, "q\n") || !strcmp(msg, "Q\n")) { // 'q' 또는 'Q' 입력 시 종료
            close(sock);
            exit(0);
        }

        // send message
        sprintf(name_msg, "%s %s", name, msg); // 이름과 메시지 합치기
        write(sock, name_msg, strlen(name_msg)); // 메시지 전송
    }
    return NULL;
}

void* recv_msg(void* arg) {
    int sock = *((int*)arg);           // 소켓 변수 설정
    char name_msg[NORMAL_SIZE + BUF_SIZE]; // 이름과 메시지를 합친 문자열 버퍼
    int str_len;

    while (1) {
        str_len = read(sock, name_msg, NORMAL_SIZE + BUF_SIZE - 1); // 메시지 읽기
        if (str_len == -1)
            return (void*)-1;
        name_msg[str_len] = 0;         // 문자열 종료 문자 설정
        fputs(name_msg, stdout);       // 메시지 출력
    }
    return NULL;
}

void menu() {
    system("clear");                   // 터미널 화면 지우기
    printf(" <<<< Chat Client >>>>\n");
    printf(" Server Port : %s \n", serv_port); // 서버 포트 출력
    printf(" Client IP   : %s \n", clnt_ip);   // 클라이언트 IP 출력
    printf(" Chat Name   : %s \n", name);      // 클라이언트 이름 출력
    printf(" Server Time : %s \n", serv_time); // 서버 시간 출력
    printf(" ============= Mode =============\n");
    printf(" 0. Select mode\n");
    printf(" 1. Change name\n");
    printf(" 2. Clear/Update\n");
    printf(" ================================\n");
    printf(" Exit -> q & Q\n\n");       // 종료 명령어 안내
}

void error_handling(char* msg) {
    fputs(msg, stderr);                // 에러 메시지 출력
    fputc('\n', stderr);
    exit(1);                           // 프로그램 종료
}
