#include <stdio.h>        // 표준 입출력 함수 선언 (printf, fputs 등)
#include <stdlib.h>       // 일반적인 유틸리티 함수 선언 (exit 등)
#include <unistd.h>       // UNIX 표준 함수 선언 (close 등)
#include <string.h>       // 문자열 처리 함수 선언 (memset, strcpy 등)
#include <arpa/inet.h>    // 인터넷 주소 변환 함수 선언 (inet_ntoa 등)
#include <sys/socket.h>   // 소켓 함수 선언 (socket, bind, listen, accept 등)
#include <netinet/in.h>   // 인터넷 주소 가족 (sockaddr_in 구조체 등)
#include <pthread.h>      // 스레드 함수 선언 (pthread_create, pthread_mutex 등)
#include <time.h>         // 시간 관련 함수 선언 (localtime 등)

#define BUF_SIZE 100      // 버퍼 크기 정의
#define MAX_CLNT 100      // 최대 클라이언트 수 정의
#define MAX_IP 30         // IP 주소 최대 길이 정의

void *handle_clnt(void *arg);        // 클라이언트 처리 함수 선언
void send_msg(char *msg, int len);   // 메시지 전송 함수 선언
void error_handling(char *msg);      // 에러 처리 함수 선언
char* serverState(int count);        // 서버 상태 함수 선언
void menu(char port[]);              // 메뉴 출력 함수 선언

int clnt_cnt=0;                      // 현재 클라이언트 수 초기화
int clnt_socks[MAX_CLNT];            // 클라이언트 소켓 배열
pthread_mutex_t mutx;                // 뮤텍스 변수 선언

int main(int argc, char *argv[]) {
    int serv_sock, clnt_sock;        // 서버 소켓, 클라이언트 소켓 변수
    struct sockaddr_in serv_adr, clnt_adr; // 서버 주소, 클라이언트 주소 구조체
    int clnt_adr_sz;                 // 클라이언트 주소 크기 변수
    pthread_t t_id;                  // 스레드 ID 변수

    struct tm *t;                    // 시간 구조체 포인터
    time_t timer = time(NULL);       // 현재 시간을 저장
    t = localtime(&timer);           // 현지 시간으로 변환

    if (argc != 2) {                 // 명령줄 인수가 올바른지 확인
        printf(" Usage : %s <port>\n", argv[0]);
        exit(1);
    }

    menu(argv[1]);                   // 메뉴 출력

    pthread_mutex_init(&mutx, NULL); // 뮤텍스 초기화
    serv_sock = socket(PF_INET, SOCK_STREAM, 0); // 서버 소켓 생성
    
    memset(&serv_adr, 0, sizeof(serv_adr)); // 서버 주소 구조체 초기화
    serv_adr.sin_family = AF_INET;           // 주소 가족 설정
    serv_adr.sin_addr.s_addr = htonl(INADDR_ANY); // 모든 IP에서의 연결 허용
    serv_adr.sin_port = htons(atoi(argv[1])); // 포트 설정

    if (bind(serv_sock, (struct sockaddr*)&serv_adr, sizeof(serv_adr)) == -1)
        error_handling("bind() error"); // 바인딩 에러 처리
    if (listen(serv_sock, 5) == -1)
        error_handling("listen() error"); // 리스닝 에러 처리

    while (1) {
        t = localtime(&timer);                 // 현지 시간 갱신
        clnt_adr_sz = sizeof(clnt_adr);        // 클라이언트 주소 크기 설정
        clnt_sock = accept(serv_sock, (struct sockaddr*)&clnt_adr, &clnt_adr_sz); // 클라이언트 연결 수락

        pthread_mutex_lock(&mutx);             // 뮤텍스 잠금
        clnt_socks[clnt_cnt++] = clnt_sock;    // 클라이언트 소켓 배열에 추가
        pthread_mutex_unlock(&mutx);           // 뮤텍스 잠금 해제

        pthread_create(&t_id, NULL, handle_clnt, (void*)&clnt_sock); // 클라이언트 처리 스레드 생성
        pthread_detach(t_id);                  // 스레드 분리
        printf(" Connected client IP : %s ", inet_ntoa(clnt_adr.sin_addr)); // 클라이언트 IP 출력
        printf("(%d-%d-%d %d:%d)\n", t->tm_year + 1900, t->tm_mon + 1, t->tm_mday,
            t->tm_hour, t->tm_min);            // 현재 시간 출력
        printf(" chatter (%d/100)\n", clnt_cnt); // 현재 클라이언트 수 출력
    }
    close(serv_sock);                          // 서버 소켓 닫기
    return 0;
}

void *handle_clnt(void *arg) {
    int clnt_sock = *((int*)arg);              // 클라이언트 소켓 설정
    int str_len = 0, i;                        // 문자열 길이 및 반복 변수
    char msg[BUF_SIZE];                        // 메시지 버퍼

    while ((str_len = read(clnt_sock, msg, sizeof(msg))) != 0) // 클라이언트로부터 메시지 읽기
        send_msg(msg, str_len);                // 메시지 전송

    // 연결 끊긴 클라이언트 제거
    pthread_mutex_lock(&mutx);                 // 뮤텍스 잠금
    for (i = 0; i < clnt_cnt; i++) {           // 클라이언트 소켓 배열에서 제거
        if (clnt_sock == clnt_socks[i]) {
            while (i++ < clnt_cnt - 1)
                clnt_socks[i] = clnt_socks[i + 1];
            break;
        }
    }
    clnt_cnt--;                                // 클라이언트 수 감소
    pthread_mutex_unlock(&mutx);               // 뮤텍스 잠금 해제
    close(clnt_sock);                          // 클라이언트 소켓 닫기
    return NULL;
}

void send_msg(char* msg, int len) {
    int i;
    pthread_mutex_lock(&mutx);                 // 뮤텍스 잠금
    for (i = 0; i < clnt_cnt; i++)             // 모든 클라이언트에게 메시지 전송
        write(clnt_socks[i], msg, len);
    pthread_mutex_unlock(&mutx);               // 뮤텍스 잠금 해제
}

void error_handling(char *msg) {
    fputs(msg, stderr);                        // 에러 메시지 출력
    fputc('\n', stderr);
    exit(1);                                   // 프로그램 종료
}

char* serverState(int count) {
    char* stateMsg = malloc(sizeof(char) * 20); // 상태 메시지 메모리 할당
    strcpy(stateMsg, "None");

    if (count < 5)                             // 클라이언트 수에 따른 상태 설정
        strcpy(stateMsg, "Good");
    else
        strcpy(stateMsg, "Bad");

    return stateMsg;
}

void menu(char port[]) {
    system("clear");                           // 터미널 화면 클리어
    printf(" <<<< Chat server >>>>\n");
    printf(" Server port    : %s\n", port);    // 서버 포트 출력
    printf(" Server state   : %s\n", serverState(clnt_cnt)); // 서버 상태 출력
    printf(" Max Client : %d\n", MAX_CLNT);    // 최대 클라이언트 수 출력
    printf(" <<<<          Log         >>>>\n\n");
}
