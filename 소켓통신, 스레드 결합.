// 서버 
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <arpa/inet.h>
#include <netinet/in.h>
#include <pthread.h>
#include <signal.h>
#include <time.h>

#define BUF_SIZE 100
#define MAX_CLNT 100
#define MAX_ROOMS 10
#define MAX_NAME_SIZE 20

void *handle_clnt(void *arg);
void send_msg(char *msg, int len, int room);
void error_handling(char *msg);
void menu(char port[]);
void signal_handler(int sig);
void handle_game(int room, int clnt_sock, char *msg);

typedef struct {
    int ready;
    char choice[MAX_NAME_SIZE];
} GameStatus;

int clnt_cnt[MAX_ROOMS] = {0};
int clnt_socks[MAX_ROOMS][MAX_CLNT];
char clnt_names[MAX_ROOMS][MAX_CLNT][MAX_NAME_SIZE];
GameStatus game_status[MAX_ROOMS][MAX_CLNT];
pthread_mutex_t mutx;

int main(int argc, char *argv[]) {
    int serv_sock, clnt_sock;
    struct sockaddr_in serv_adr, clnt_adr;
    int clnt_adr_sz;
    pthread_t t_id;

    if (argc != 2) {
        printf("Usage: %s <port>\n", argv[0]);
        exit(1);
    }

    signal(SIGINT, signal_handler);

    menu(argv[1]);

    pthread_mutex_init(&mutx, NULL);
    serv_sock = socket(PF_INET, SOCK_STREAM, 0);

    memset(&serv_adr, 0, sizeof(serv_adr));
    serv_adr.sin_family = AF_INET;
    serv_adr.sin_addr.s_addr = htonl(INADDR_ANY);
    serv_adr.sin_port = htons(atoi(argv[1]));

    if (bind(serv_sock, (struct sockaddr*)&serv_adr, sizeof(serv_adr)) == -1)
        error_handling("bind() error");
    if (listen(serv_sock, 5) == -1)
        error_handling("listen() error");

    while (1) {
        clnt_adr_sz = sizeof(clnt_adr);
        clnt_sock = accept(serv_sock, (struct sockaddr*)&clnt_adr, &clnt_adr_sz);

        pthread_mutex_lock(&mutx);
        int room;
        read(clnt_sock, &room, sizeof(int));
        clnt_socks[room][clnt_cnt[room]] = clnt_sock;
        read(clnt_sock, clnt_names[room][clnt_cnt[room]], MAX_NAME_SIZE);
        clnt_cnt[room]++;
        pthread_mutex_unlock(&mutx);

        pthread_create(&t_id, NULL, handle_clnt, (void*)&clnt_sock);
        pthread_detach(t_id);

        time_t timer = time(NULL);
        struct tm *t = localtime(&timer);

        printf("Connected client IP: %s (Room %d) (%d-%d-%d %d:%d)\n", 
               inet_ntoa(clnt_adr.sin_addr), room, t->tm_year + 1900, t->tm_mon + 1, 
               t->tm_mday, t->tm_hour, t->tm_min);
        printf("Chatter in Room %d (%d/100)\n", room, clnt_cnt[room]);
    }
    close(serv_sock);
    return 0;
}

void *handle_clnt(void *arg) {
    int clnt_sock = *((int*)arg);
    int str_len = 0;
    char msg[BUF_SIZE];
    int room;
    int idx;

    read(clnt_sock, &room, sizeof(int));
    for (idx = 0; idx < clnt_cnt[room]; idx++) {
        if (clnt_socks[room][idx] == clnt_sock) break;
    }

    while ((str_len = read(clnt_sock, msg, sizeof(msg))) != 0) {
        if (strncmp(msg, "/game", 5) == 0) {
            handle_game(room, clnt_sock, msg);
        } else {
            send_msg(msg, str_len, room);
        }
    }

    pthread_mutex_lock(&mutx);
    for (int i = 0; i < clnt_cnt[room]; i++) {
        if (clnt_sock == clnt_socks[room][i]) {
            while (i++ < clnt_cnt[room] - 1) {
                clnt_socks[room][i] = clnt_socks[room][i + 1];
                strcpy(clnt_names[room][i], clnt_names[room][i + 1]);
            }
            break;
        }
    }
    clnt_cnt[room]--;
    pthread_mutex_unlock(&mutx);
    close(clnt_sock);
    return NULL;
}

void send_msg(char *msg, int len, int room) {
    pthread_mutex_lock(&mutx);
    for (int i = 0; i < clnt_cnt[room]; i++)
        write(clnt_socks[room][i], msg, len);
    pthread_mutex_unlock(&mutx);
}

void error_handling(char *msg) {
    fputs(msg, stderr);
    fputc('\n', stderr);
    exit(1);
}

void signal_handler(int sig) {
    if (sig == SIGINT) {
        printf("\nServer shutting down...\n");
        for (int i = 0; i < MAX_ROOMS; i++) {
            for (int j = 0; j < clnt_cnt[i]; j++) {
                close(clnt_socks[i][j]);
            }
        }
        exit(0);
    }
}

void menu(char port[]) {
    system("clear");
    printf("<<<< Chat server >>>>\n");
    printf("Server port    : %s\n", port);
    printf("Max Client : %d\n", MAX_CLNT);
    printf("Max Rooms : %d\n", MAX_ROOMS);
    printf("<<<<          Log         >>>>\n\n");
}

void handle_game(int room, int clnt_sock, char *msg) {
    char choice[MAX_NAME_SIZE];
    sscanf(msg + 6, "%s", choice);

    pthread_mutex_lock(&mutx);
    for (int i = 0; i < clnt_cnt[room]; i++) {
        if (clnt_socks[room][i] == clnt_sock) {
            game_status[room][i].ready = 1;
            strcpy(game_status[room][i].choice, choice);
            break;
        }
    }

    int all_ready = 1;
    for (int i = 0; i < clnt_cnt[room]; i++) {
        if (game_status[room][i].ready == 0) {
            all_ready = 0;
            break;
        }
    }

    if (all_ready) {
        char result_msg[BUF_SIZE] = "Game results:\n";
        for (int i = 0; i < clnt_cnt[room]; i++) {
            strcat(result_msg, clnt_names[room][i]);
            strcat(result_msg, " chose ");
            strcat(result_msg, game_status[room][i].choice);
            strcat(result_msg, "\n");
        }
        send_msg(result_msg, strlen(result_msg), room);

        for (int i = 0; i < clnt_cnt[room]; i++) {
            game_status[room][i].ready = 0;
        }
    }
    pthread_mutex_unlock(&mutx);
}


// 클라이언트
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <arpa/inet.h>
#include <pthread.h>
#include <signal.h>
#include <time.h>

#define BUF_SIZE 100
#define NORMAL_SIZE 20

void *send_msg(void *arg);
void *recv_msg(void *arg);
void error_handling(char *msg);
void menu();
void change_name();
void update_screen();
void signal_handler(int sig);
void play_game();

char name[NORMAL_SIZE] = "[DEFAULT]";
char msg_form[NORMAL_SIZE];
char serv_time[NORMAL_SIZE];
char msg[BUF_SIZE];
char serv_port[NORMAL_SIZE];
char clnt_ip[NORMAL_SIZE];
int sock;
int room;

int main(int argc, char *argv[]) {
    struct sockaddr_in serv_addr;
    pthread_t snd_thread, rcv_thread;
    void *thread_return;

    if (argc != 4) {
        printf("Usage: %s <ip> <port> <name>\n", argv[0]);
        exit(1);
    }

    signal(SIGINT, signal_handler);

    time_t timer = time(NULL);
    struct tm *t = localtime(&timer);
    sprintf(serv_time, "%d-%d-%d %d:%d", t->tm_year + 1900, t->tm_mon + 1, t->tm_mday, t->tm_hour, t->tm_min);

    sprintf(name, "[%s]", argv[3]);
    sprintf(serv_port, "%s", argv[2]);
    sprintf(clnt_ip, "%s", argv[1]);

    menu();

    sock = socket(PF_INET, SOCK_STREAM, 0);

    memset(&serv_addr, 0, sizeof(serv_addr));
    serv_addr.sin_family = AF_INET;
    serv_addr.sin_addr.s_addr = inet_addr(argv[1]);
    serv_addr.sin_port = htons(atoi(argv[2]));

    if (connect(sock, (struct sockaddr*)&serv_addr, sizeof(serv_addr)) == -1)
        error_handling("connect() error");

    printf("Enter the chat room number: ");
    scanf("%d", &room);
    write(sock, &room, sizeof(int));
    write(sock, name, NORMAL_SIZE);

    pthread_create(&snd_thread, NULL, send_msg, (void*)&sock);
    pthread_create(&rcv_thread, NULL, recv_msg, (void*)&sock);
    pthread_join(snd_thread, &thread_return);
    pthread_join(rcv_thread, &thread_return);
    close(sock);
    return 0;
}

void *send_msg(void *arg) {
    int sock = *((int*)arg);
    char name_msg[NORMAL_SIZE + BUF_SIZE];
    while (1) {
        fgets(msg, BUF_SIZE, stdin);
        if (!strcmp(msg, "q\n") || !strcmp(msg, "Q\n")) {
            close(sock);
            exit(0);
        }
        if (!strcmp(msg, "/menu\n")) {
            menu();
        } else if (!strcmp(msg, "/name\n")) {
            change_name();
        } else if (!strcmp(msg, "/clear\n")) {
            update_screen();
        } else if (!strcmp(msg, "/game\n")) {
            play_game();
        } else {
            sprintf(name_msg, "%s %s", name, msg);
            write(sock, name_msg, strlen(name_msg));
        }
    }
    return NULL;
}

void *recv_msg(void *arg) {
    int sock = *((int*)arg);
    char name_msg[NORMAL_SIZE + BUF_SIZE];
    int str_len;

    while (1) {
        str_len = read(sock, name_msg, NORMAL_SIZE + BUF_SIZE - 1);
        if (str_len == -1)
            return (void*)-1;
        name_msg[str_len] = 0;
        fputs(name_msg, stdout);
    }
    return NULL;
}

void error_handling(char *msg) {
    fputs(msg, stderr);
    fputc('\n', stderr);
    exit(1);
}

void menu() {
    system("clear");
    printf("<<<< Chat Client >>>>\n");
    printf("Server Port : %s \n", serv_port);
    printf("Client IP   : %s \n", clnt_ip);
    printf("Chat Name   : %s \n", name);
    printf("Server Time : %s \n", serv_time);
    printf("============ Mode ============\n");
    printf("0. Select mode\n");
    printf("1. Change name\n");
    printf("2. Clear/Update\n");
    printf("/game to play Rock-Paper-Scissors\n");
    printf("===============================\n");
    printf("Exit -> q & Q\n\n");
}

void change_name() {
    char new_name[NORMAL_SIZE];
    printf("Enter new name: ");
    fgets(new_name, NORMAL_SIZE, stdin);
    new_name[strcspn(new_name, "\n")] = 0;
    sprintf(name, "[%s]", new_name);
    printf("Name changed to %s\n", name);
}

void update_screen() {
    menu();
}

void signal_handler(int sig) {
    if (sig == SIGINT) {
        printf("\nClient shutting down...\n");
        close(sock);
        exit(0);
    }
}

void play_game() {
    char choice[NORMAL_SIZE];
    printf("Enter your choice (rock, paper, scissors): ");
    fgets(choice, NORMAL_SIZE, stdin);
    choice[strcspn(choice, "\n")] = 0;
    sprintf(msg, "/game %s", choice);
    write(sock, msg, strlen(msg));
}

